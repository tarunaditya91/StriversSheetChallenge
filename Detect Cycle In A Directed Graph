bool dfs(int node, vector<int>&vis,vector<int>&pos,vector<vector<int>>&adj){
  vis[node]=1;
  pos[node]=1;
  for(auto it:adj[node]){
    if(!vis[it]){
      if(dfs(it,vis,pos,adj))return true;
    }
    else if(pos[it]){
      return true;
    }
  }
  pos[node]=0;
  return false;
}
int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  // Write your code here.
  vector<vector<int>> adj(n+1);
  for(int i=0;i<edges.size();i++){
    adj[edges[i].first].push_back(edges[i].second);
  }
  vector<int>vis(n+1,0);
  vector<int>pos(n+1,0);
  for(int i=1;i<=n;i++){
    if(!vis[i]){
      if(dfs(i,vis,pos,adj))return 1;
    }
  }
  return 0;
}
