#include <bits/stdc++.h> 
vector<int> dijkstra(vector<vector<int>> &vec, int vertices, int edges, int source) {
    // Write your code here.
    vector<vector<pair<int, int>>> adj(vertices + 1);
    for(int i=0;i<edges;i++){
        int u = vec[i][0];
        int v = vec[i][1];
        int wt = vec[i][2];
        adj[u].push_back({v, wt});
        adj[v].push_back({u, wt});
    }
    
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int,int>>> pq;

    vector<int>dis(vertices,4e9);
    dis[source]=0;
    pq.push({0,source});
    while(!pq.empty()){
        int cu=pq.top().first;
        int node=pq.top().second;
        pq.pop();
        for(auto it:adj[node]){
            int edgewt=it.second;
            int adjnode=it.first;
            if(cu+edgewt<dis[adjnode]){
                dis[adjnode]=cu+edgewt;
                pq.push({dis[adjnode],adjnode});
            }
        }
    }
    return dis;
}
